from collections.abc import Iterator, Mapping, Sequence
from matplotlib import cbook, colors
from matplotlib.colorbar import Colorbar

import numpy as np
from numpy.typing import ArrayLike
from typing import Union

ColorMapType = Union[colors.Colormap,
                     colors.BivarColormap,
                     colors.MultivarColormap]

class ColormapRegistry(Mapping[str, ColorMapType]):
    def __init__(self, cmaps: Mapping[str, ColorMapType]) -> None: ...
    def __getitem__(self, item: str) -> ColorMapType: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __call__(self) -> list[str]: ...
    def register(
        self, cmap: ColorMapType, *, name: str | None = ..., force: bool = ...
    ) -> None: ...
    def unregister(self, name: str) -> None: ...
    def get_cmap(self, cmap: str | ColorMapType) -> ColorMapType: ...

_colormaps: ColormapRegistry = ...
_multivar_colormaps: ColormapRegistry = ...
_bivar_colormaps: ColormapRegistry = ...

def get_cmap(name: str | colors.Colormap | None = ..., lut: int | None = ...) -> colors.Colormap: ...

class VectorMappable:
    cmap: ColorMapType | None
    colorbar: Colorbar | None
    callbacks: cbook.CallbackRegistry
    def __init__(
        self,
        norm: str | colors.Normalize | None | Sequence[str | colors.Normalize | None]= ...,
        cmap: str | ColorMapType | None = ...,
    ) -> None: ...
    def to_rgba(
        self,
        x: np.ndarray,
        alpha: float | ArrayLike | None = ...,
        bytes: bool = ...,
        norm: bool = ...,
    ) -> np.ndarray: ...
    def set_array(self, A: ArrayLike | None) -> None: ...
    def get_array(self) -> np.ndarray | None: ...
    def get_cmap(self) -> ColorMapType: ...
    def get_clim(self) -> tuple[float, float]: ...
    def set_clim(self, vmin: float | tuple[float, float] | None | Sequence[float | None] = ..., vmax: float | None | Sequence[float | None] = ...) -> None: ...
    def get_alpha(self) -> float | None: ...
    def set_cmap(self, cmap: str | ColorMapType) -> None: ...
    @property
    def norm(self) -> colors.Normalize | Sequence[colors.Normalize]: ...
    @norm.setter
    def norm(self, norm: colors.Normalize | str | None | Sequence[colors.Normalize | str | None]) -> None: ...
    def set_norm(self, norm: colors.Normalize | str | None | Sequence[colors.Normalize | str | None]) -> None: ...
    def autoscale(self) -> None: ...
    def autoscale_None(self) -> None: ...
    def changed(self) -> None: ...

class ScalarMappable(VectorMappable):
    def __init__(
        self,
        norm: colors.Normalize | None = ...,
        cmap: str | colors.Colormap | None = ...,
    ) -> None: ...
    def set_cmap(self, cmap: str | colors.Colormap) -> None: ... # type: ignore[override]
